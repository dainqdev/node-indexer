import { normalizeStructTag, parseStructTag } from "@mysten/sui/utils";import { bcs, BcsType } from "@mysten/sui/bcs";export const CoinStruct = bcs.struct("Coin", { value: bcs.u64() });export  type StructTag = ReturnType<typeof parseStructTag>;export const ACLStruct = () => bcs.struct("ACL", {        fields: bcs.struct("ACLFields", {          permissions: ((arg0: BcsType<any>,arg1: BcsType<any>) => bcs.struct("LinkedTable", {      fields: bcs.struct("LinkedTableFields", {        id: bcs.struct('0x2::object::ID', {        id: bcs.Address      }),head: ((arg0: BcsType<any>) => bcs.struct("Option", {      fields: bcs.struct("OptionFields", {        vec: bcs.vector(arg0),      })    }))(arg0),tail: ((arg0: BcsType<any>) => bcs.struct("Option", {      fields: bcs.struct("OptionFields", {        vec: bcs.vector(arg0),      })    }))(arg0),size: bcs.u64(),      })    }))(bcs.Address,bcs.u128()),        })      });      export function isACL(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'acl'          && tag.name === 'ACL'      };export const MemberStruct = () => bcs.struct("Member", {        fields: bcs.struct("MemberFields", {          address: bcs.Address,permission: bcs.u128(),        })      });      export function isMember(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'acl'          && tag.name === 'Member'      };export const AmountsStruct = () => bcs.struct("Amounts", {        fields: bcs.struct("AmountsFields", {          amount_x: bcs.u64(),amount_y: bcs.u64(),        })      });      export function isAmounts(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'bin_helper'          && tag.name === 'Amounts'      };export const BinManagerStruct = () => bcs.struct("BinManager", {        fields: bcs.struct("BinManagerFields", {          bin_step: bcs.u16(),bins: ((arg0: BcsType<any>) => bcs.struct("SkipList", {      fields: bcs.struct("SkipListFields", {        id: bcs.struct('0x2::object::ID', {        id: bcs.Address      }),head: bcs.vector((() => bcs.struct("OptionU64", {      fields: bcs.struct("OptionU64Fields", {        is_none: bcs.bool(),v: bcs.u64(),      })    }))()),tail: (() => bcs.struct("OptionU64", {      fields: bcs.struct("OptionU64Fields", {        is_none: bcs.bool(),v: bcs.u64(),      })    }))(),level: bcs.u64(),max_level: bcs.u64(),list_p: bcs.u64(),size: bcs.u64(),random: (() => bcs.struct("Random", {      fields: bcs.struct("RandomFields", {        seed: bcs.u64(),      })    }))(),      })    }))((() => bcs.struct("BinReserves", {      fields: bcs.struct("BinReservesFields", {        reserve_x: bcs.u64(),reserve_y: bcs.u64(),fee_x: bcs.u64(),fee_y: bcs.u64(),price: bcs.u128(),fee_growth_x: bcs.u128(),fee_growth_y: bcs.u128(),rewards_growth: bcs.vector(bcs.u128()),liquidity: bcs.u128(),last_update_time: bcs.u64(),      })    }))()),        })      });      export function isBinManager(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'bin_helper'          && tag.name === 'BinManager'      };export const BinReservesStruct = () => bcs.struct("BinReserves", {        fields: bcs.struct("BinReservesFields", {          reserve_x: bcs.u64(),reserve_y: bcs.u64(),fee_x: bcs.u64(),fee_y: bcs.u64(),price: bcs.u128(),fee_growth_x: bcs.u128(),fee_growth_y: bcs.u128(),rewards_growth: bcs.vector(bcs.u128()),liquidity: bcs.u128(),last_update_time: bcs.u64(),        })      });      export function isBinReserves(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'bin_helper'          && tag.name === 'BinReserves'      };export const NextNonEmptyBinQueriedStruct = () => bcs.struct("NextNonEmptyBinQueried", {        fields: bcs.struct("NextNonEmptyBinQueriedFields", {          swap_for_y: bcs.bool(),id: bcs.u32(),next_id: bcs.u32(),        })      });      export function isNextNonEmptyBinQueried(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'bin_helper'          && tag.name === 'NextNonEmptyBinQueried'      };export const AddRoleEvent = () => bcs.struct("AddRoleEvent", {        fields: bcs.struct("AddRoleEventFields", {          member: bcs.Address,role: bcs.u8(),        })      });      export function isAddRoleEvent(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'config'          && tag.name === 'AddRoleEvent'      };export const AdminCapStruct = () => bcs.struct("AdminCap", {        fields: bcs.struct("AdminCapFields", {          id: bcs.struct('0x2::object::ID', {        id: bcs.Address      }),        })      });      export function isAdminCap(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'config'          && tag.name === 'AdminCap'      };export const DeleteBinStepEvent = () => bcs.struct("DeleteBinStepEvent", {        fields: bcs.struct("DeleteBinStepEventFields", {          bin_step: bcs.u16(),        })      });      export function isDeleteBinStepEvent(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'config'          && tag.name === 'DeleteBinStepEvent'      };export const FeeParametersStruct = () => bcs.struct("FeeParameters", {        fields: bcs.struct("FeeParametersFields", {          base_factor: bcs.u16(),filter_period: bcs.u16(),decay_period: bcs.u16(),reduction_factor: bcs.u16(),variable_fee_control: bcs.u32(),protocol_share: bcs.u16(),max_volatility_accumulator: bcs.u32(),        })      });      export function isFeeParameters(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'config'          && tag.name === 'FeeParameters'      };export const GlobalConfigStruct = () => bcs.struct("GlobalConfig", {        fields: bcs.struct("GlobalConfigFields", {          id: bcs.struct('0x2::object::ID', {        id: bcs.Address      }),bin_steps: ((arg0: BcsType<any>,arg1: BcsType<any>) => bcs.struct("VecMap", {      fields: bcs.struct("VecMapFields", {        contents: bcs.vector(((arg0: BcsType<any>,arg1: BcsType<any>) => bcs.struct("Entry", {      fields: bcs.struct("EntryFields", {        key: arg0,value: arg1,      })    }))(arg0,arg1)),      })    }))(bcs.u16(),(() => bcs.struct("FeeParameters", {      fields: bcs.struct("FeeParametersFields", {        base_factor: bcs.u16(),filter_period: bcs.u16(),decay_period: bcs.u16(),reduction_factor: bcs.u16(),variable_fee_control: bcs.u32(),protocol_share: bcs.u16(),max_volatility_accumulator: bcs.u32(),      })    }))()),flash_loan_fee_rate: bcs.u64(),quote_asset_whitelist: ((arg0: BcsType<any>) => bcs.struct("VecSet", {      fields: bcs.struct("VecSetFields", {        contents: bcs.vector(arg0),      })    }))((() => bcs.struct("TypeName", {      fields: bcs.struct("TypeNameFields", {        name: (() => bcs.struct("String", {      fields: bcs.struct("StringFields", {        bytes: bcs.vector(bcs.u8()),      })    }))(),      })    }))()),acl: (() => bcs.struct("ACL", {      fields: bcs.struct("ACLFields", {        permissions: ((arg0: BcsType<any>,arg1: BcsType<any>) => bcs.struct("LinkedTable", {      fields: bcs.struct("LinkedTableFields", {        id: bcs.struct('0x2::object::ID', {        id: bcs.Address      }),head: ((arg0: BcsType<any>) => bcs.struct("Option", {      fields: bcs.struct("OptionFields", {        vec: bcs.vector(arg0),      })    }))(arg0),tail: ((arg0: BcsType<any>) => bcs.struct("Option", {      fields: bcs.struct("OptionFields", {        vec: bcs.vector(arg0),      })    }))(arg0),size: bcs.u64(),      })    }))(bcs.Address,bcs.u128()),      })    }))(),package_version: bcs.u64(),        })      });      export function isGlobalConfig(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'config'          && tag.name === 'GlobalConfig'      };export const InitConfigEvent = () => bcs.struct("InitConfigEvent", {        fields: bcs.struct("InitConfigEventFields", {          admin_cap_id: bcs.Address,global_config_id: bcs.Address,        })      });      export function isInitConfigEvent(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'config'          && tag.name === 'InitConfigEvent'      };export const RemoveMemberEvent = () => bcs.struct("RemoveMemberEvent", {        fields: bcs.struct("RemoveMemberEventFields", {          member: bcs.Address,        })      });      export function isRemoveMemberEvent(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'config'          && tag.name === 'RemoveMemberEvent'      };export const RemoveRoleEvent = () => bcs.struct("RemoveRoleEvent", {        fields: bcs.struct("RemoveRoleEventFields", {          member: bcs.Address,role: bcs.u8(),        })      });      export function isRemoveRoleEvent(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'config'          && tag.name === 'RemoveRoleEvent'      };export const SetBinStepEvent = () => bcs.struct("SetBinStepEvent", {        fields: bcs.struct("SetBinStepEventFields", {          bin_step: bcs.u16(),base_factor: bcs.u16(),filter_period: bcs.u16(),decay_period: bcs.u16(),reduction_factor: bcs.u16(),variable_fee_control: bcs.u32(),protocol_share: bcs.u16(),max_volatility_accumulator: bcs.u32(),        })      });      export function isSetBinStepEvent(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'config'          && tag.name === 'SetBinStepEvent'      };export const SetPackageVersionStruct = () => bcs.struct("SetPackageVersion", {        fields: bcs.struct("SetPackageVersionFields", {          new_version: bcs.u64(),old_version: bcs.u64(),        })      });      export function isSetPackageVersion(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'config'          && tag.name === 'SetPackageVersion'      };export const SetRolesEvent = () => bcs.struct("SetRolesEvent", {        fields: bcs.struct("SetRolesEventFields", {          member: bcs.Address,roles: bcs.u128(),        })      });      export function isSetRolesEvent(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'config'          && tag.name === 'SetRolesEvent'      };export const UpdateFlashLoanFeeRateEvent = () => bcs.struct("UpdateFlashLoanFeeRateEvent", {        fields: bcs.struct("UpdateFlashLoanFeeRateEventFields", {          old_fee_rate: bcs.u64(),new_fee_rate: bcs.u64(),        })      });      export function isUpdateFlashLoanFeeRateEvent(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'config'          && tag.name === 'UpdateFlashLoanFeeRateEvent'      };export const CreatePairEvent = () => bcs.struct("CreatePairEvent", {        fields: bcs.struct("CreatePairEventFields", {          pair_id: bcs.Address,bin_step: bcs.u16(),coin_type_a: (() => bcs.struct("String", {      fields: bcs.struct("StringFields", {        bytes: bcs.vector(bcs.u8()),      })    }))(),coin_type_b: (() => bcs.struct("String", {      fields: bcs.struct("StringFields", {        bytes: bcs.vector(bcs.u8()),      })    }))(),active_id: bcs.u32(),        })      });      export function isCreatePairEvent(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_factory'          && tag.name === 'CreatePairEvent'      };export const InitFactoryEvent = () => bcs.struct("InitFactoryEvent", {        fields: bcs.struct("InitFactoryEventFields", {          pairs_id: bcs.Address,        })      });      export function isInitFactoryEvent(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_factory'          && tag.name === 'InitFactoryEvent'      };export const PairSimpleInfoStruct = () => bcs.struct("PairSimpleInfo", {        fields: bcs.struct("PairSimpleInfoFields", {          pair_id: bcs.Address,pair_key: bcs.Address,bin_step: bcs.u16(),coin_type_a: (() => bcs.struct("TypeName", {      fields: bcs.struct("TypeNameFields", {        name: (() => bcs.struct("String", {      fields: bcs.struct("StringFields", {        bytes: bcs.vector(bcs.u8()),      })    }))(),      })    }))(),coin_type_b: (() => bcs.struct("TypeName", {      fields: bcs.struct("TypeNameFields", {        name: (() => bcs.struct("String", {      fields: bcs.struct("StringFields", {        bytes: bcs.vector(bcs.u8()),      })    }))(),      })    }))(),ignored_for_routing: bcs.bool(),        })      });      export function isPairSimpleInfo(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_factory'          && tag.name === 'PairSimpleInfo'      };export const PairsStruct = () => bcs.struct("Pairs", {        fields: bcs.struct("PairsFields", {          id: bcs.struct('0x2::object::ID', {        id: bcs.Address      }),list: ((arg0: BcsType<any>,arg1: BcsType<any>) => bcs.struct("LinkedTable", {      fields: bcs.struct("LinkedTableFields", {        id: bcs.struct('0x2::object::ID', {        id: bcs.Address      }),head: ((arg0: BcsType<any>) => bcs.struct("Option", {      fields: bcs.struct("OptionFields", {        vec: bcs.vector(arg0),      })    }))(arg0),tail: ((arg0: BcsType<any>) => bcs.struct("Option", {      fields: bcs.struct("OptionFields", {        vec: bcs.vector(arg0),      })    }))(arg0),size: bcs.u64(),      })    }))(bcs.Address,(() => bcs.struct("PairSimpleInfo", {      fields: bcs.struct("PairSimpleInfoFields", {        pair_id: bcs.Address,pair_key: bcs.Address,bin_step: bcs.u16(),coin_type_a: (() => bcs.struct("TypeName", {      fields: bcs.struct("TypeNameFields", {        name: (() => bcs.struct("String", {      fields: bcs.struct("StringFields", {        bytes: bcs.vector(bcs.u8()),      })    }))(),      })    }))(),coin_type_b: (() => bcs.struct("TypeName", {      fields: bcs.struct("TypeNameFields", {        name: (() => bcs.struct("String", {      fields: bcs.struct("StringFields", {        bytes: bcs.vector(bcs.u8()),      })    }))(),      })    }))(),ignored_for_routing: bcs.bool(),      })    }))()),index: bcs.u64(),        })      });      export function isPairs(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_factory'          && tag.name === 'Pairs'      };export const AddLiquidityEvent = () => bcs.struct("AddLiquidityEvent", {        fields: bcs.struct("AddLiquidityEventFields", {          pair: bcs.Address,position: bcs.Address,ids: bcs.vector(bcs.u32()),amounts: bcs.vector((() => bcs.struct("Amounts", {      fields: bcs.struct("AmountsFields", {        amount_x: bcs.u64(),amount_y: bcs.u64(),      })    }))()),tokens: bcs.vector(bcs.u128()),bin_reserves_after: bcs.vector((() => bcs.struct("BinReserves", {      fields: bcs.struct("BinReservesFields", {        reserve_x: bcs.u64(),reserve_y: bcs.u64(),fee_x: bcs.u64(),fee_y: bcs.u64(),price: bcs.u128(),fee_growth_x: bcs.u128(),fee_growth_y: bcs.u128(),rewards_growth: bcs.vector(bcs.u128()),liquidity: bcs.u128(),last_update_time: bcs.u64(),      })    }))()),        })      });      export function isAddLiquidityEvent(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_pair'          && tag.name === 'AddLiquidityEvent'      };export const ClosePositionEvent = () => bcs.struct("ClosePositionEvent", {        fields: bcs.struct("ClosePositionEventFields", {          pair: bcs.Address,position: bcs.Address,owner: bcs.Address,        })      });      export function isClosePositionEvent(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_pair'          && tag.name === 'ClosePositionEvent'      };export const CollectedProtocolFeesStruct = () => bcs.struct("CollectedProtocolFees", {        fields: bcs.struct("CollectedProtocolFeesFields", {          fee_recipient: bcs.Address,protocol_fees: (() => bcs.struct("Amounts", {      fields: bcs.struct("AmountsFields", {        amount_x: bcs.u64(),amount_y: bcs.u64(),      })    }))(),        })      });      export function isCollectedProtocolFees(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_pair'          && tag.name === 'CollectedProtocolFees'      };export const CompositionFeesStruct = () => bcs.struct("CompositionFees", {        fields: bcs.struct("CompositionFeesFields", {          sender: bcs.Address,id: bcs.u32(),total_fees: (() => bcs.struct("Amounts", {      fields: bcs.struct("AmountsFields", {        amount_x: bcs.u64(),amount_y: bcs.u64(),      })    }))(),protocol_fees: (() => bcs.struct("Amounts", {      fields: bcs.struct("AmountsFields", {        amount_x: bcs.u64(),amount_y: bcs.u64(),      })    }))(),        })      });      export function isCompositionFees(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_pair'          && tag.name === 'CompositionFees'      };export const FeesCollectedStruct = () => bcs.struct("FeesCollected", {        fields: bcs.struct("FeesCollectedFields", {          bucket_id: bcs.Address,bin_ids: bcs.vector(bcs.u32()),amounts_x: bcs.vector(bcs.u64()),amounts_y: bcs.vector(bcs.u64()),        })      });      export function isFeesCollected(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_pair'          && tag.name === 'FeesCollected'      };export const FeesStatisticStruct = () => bcs.struct("FeesStatistic", {        fields: bcs.struct("FeesStatisticFields", {          total_fee_x: bcs.u64(),total_fee_y: bcs.u64(),flashloan_fee_x: bcs.u64(),flashloan_fee_y: bcs.u64(),swap_fee_x: bcs.u64(),swap_fee_y: bcs.u64(),composition_fee_x: bcs.u64(),composition_fee_y: bcs.u64(),        })      });      export function isFeesStatistic(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_pair'          && tag.name === 'FeesStatistic'      };export const FlashLoanEvent = () => bcs.struct("FlashLoanEvent", {        fields: bcs.struct("FlashLoanEventFields", {          pool: bcs.Address,loan_x: bcs.bool(),amount: bcs.u64(),fee_amount: bcs.u64(),        })      });      export function isFlashLoanEvent(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_pair'          && tag.name === 'FlashLoanEvent'      };export const FlashLoanReceiptStruct = () => bcs.struct("FlashLoanReceipt", {        fields: bcs.struct("FlashLoanReceiptFields", {          pool_id: bcs.Address,loan_x: bcs.bool(),amount: bcs.u64(),fee_amount: bcs.u64(),        })      });      export function isFlashLoanReceipt(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_pair'          && tag.name === 'FlashLoanReceipt'      };export const ForcedDecayStruct = () => bcs.struct("ForcedDecay", {        fields: bcs.struct("ForcedDecayFields", {          sender: bcs.Address,id_reference: bcs.u32(),volatility_reference: bcs.u32(),        })      });      export function isForcedDecay(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_pair'          && tag.name === 'ForcedDecay'      };export const GlobalFeeInfoStruct = () => bcs.struct("GlobalFeeInfo", {        fields: bcs.struct("GlobalFeeInfoFields", {          total_fee_x: bcs.u64(),total_fee_y: bcs.u64(),swap_fee_x: bcs.u64(),swap_fee_y: bcs.u64(),flashloan_fee_x: bcs.u64(),flashloan_fee_y: bcs.u64(),composition_fee_x: bcs.u64(),composition_fee_y: bcs.u64(),        })      });      export function isGlobalFeeInfo(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_pair'          && tag.name === 'GlobalFeeInfo'      };export const IdFromPriceQueriedStruct = () => bcs.struct("IdFromPriceQueried", {        fields: bcs.struct("IdFromPriceQueriedFields", {          price: bcs.u128(),id: bcs.u32(),        })      });      export function isIdFromPriceQueried(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_pair'          && tag.name === 'IdFromPriceQueried'      };export const LBPairStruct = (arg0: BcsType<any>,arg1: BcsType<any>) => bcs.struct("LBPair", {        fields: bcs.struct("LBPairFields", {          id: bcs.struct('0x2::object::ID', {        id: bcs.Address      }),index: bcs.u64(),is_pause: bcs.bool(),bin_step: bcs.u16(),parameters: (() => bcs.struct("PairParameters", {      fields: bcs.struct("PairParametersFields", {        base_factor: bcs.u16(),filter_period: bcs.u16(),decay_period: bcs.u16(),reduction_factor: bcs.u16(),variable_fee_control: bcs.u32(),protocol_share: bcs.u16(),max_volatility_accumulator: bcs.u32(),volatility_accumulator: bcs.u32(),volatility_reference: bcs.u32(),id_reference: bcs.u32(),time_of_last_update: bcs.u64(),oracle_id: bcs.u16(),active_id: bcs.u32(),      })    }))(),protocol_fee_x: bcs.u64(),protocol_fee_y: bcs.u64(),bin_manager: (() => bcs.struct("BinManager", {      fields: bcs.struct("BinManagerFields", {        bin_step: bcs.u16(),bins: ((arg0: BcsType<any>) => bcs.struct("SkipList", {      fields: bcs.struct("SkipListFields", {        id: bcs.struct('0x2::object::ID', {        id: bcs.Address      }),head: bcs.vector((() => bcs.struct("OptionU64", {      fields: bcs.struct("OptionU64Fields", {        is_none: bcs.bool(),v: bcs.u64(),      })    }))()),tail: (() => bcs.struct("OptionU64", {      fields: bcs.struct("OptionU64Fields", {        is_none: bcs.bool(),v: bcs.u64(),      })    }))(),level: bcs.u64(),max_level: bcs.u64(),list_p: bcs.u64(),size: bcs.u64(),random: (() => bcs.struct("Random", {      fields: bcs.struct("RandomFields", {        seed: bcs.u64(),      })    }))(),      })    }))((() => bcs.struct("BinReserves", {      fields: bcs.struct("BinReservesFields", {        reserve_x: bcs.u64(),reserve_y: bcs.u64(),fee_x: bcs.u64(),fee_y: bcs.u64(),price: bcs.u128(),fee_growth_x: bcs.u128(),fee_growth_y: bcs.u128(),rewards_growth: bcs.vector(bcs.u128()),liquidity: bcs.u128(),last_update_time: bcs.u64(),      })    }))()),      })    }))(),oracle: (() => bcs.struct("Oracle", {      fields: bcs.struct("OracleFields", {        samples: bcs.vector((() => bcs.struct("Sample", {      fields: bcs.struct("SampleFields", {        oracle_length: bcs.u16(),cumulative_id: bcs.u64(),cumulative_volatility: bcs.u64(),cumulative_bin_crossed: bcs.u64(),sample_lifetime: bcs.u8(),created_at: bcs.u64(),      })    }))()),initialized: bcs.bool(),      })    }))(),position_manager: (() => bcs.struct("LBPositionManager", {      fields: bcs.struct("LBPositionManagerFields", {        total_supplies: ((arg0: BcsType<any>,arg1: BcsType<any>) => bcs.struct("Table", {      fields: bcs.struct("TableFields", {        id: bcs.struct('0x2::object::ID', {        id: bcs.Address      }),size: bcs.u64(),      })    }))(bcs.u32(),bcs.u128()),positions: ((arg0: BcsType<any>,arg1: BcsType<any>) => bcs.struct("Table", {      fields: bcs.struct("TableFields", {        id: bcs.struct('0x2::object::ID', {        id: bcs.Address      }),size: bcs.u64(),      })    }))(bcs.Address,(() => bcs.struct("LBPositionInfo", {      fields: bcs.struct("LBPositionInfoFields", {        position_id: bcs.Address,bins: ((arg0: BcsType<any>,arg1: BcsType<any>) => bcs.struct("Table", {      fields: bcs.struct("TableFields", {        id: bcs.struct('0x2::object::ID', {        id: bcs.Address      }),size: bcs.u64(),      })    }))(bcs.u32(),(() => bcs.struct("LBBinPosition", {      fields: bcs.struct("LBBinPositionFields", {        amount: bcs.u128(),fee_growth_inside_last_x: bcs.u128(),fee_growth_inside_last_y: bcs.u128(),fees_pending_x: bcs.u64(),fees_pending_y: bcs.u64(),rewards: bcs.vector((() => bcs.struct("LBBinReward", {      fields: bcs.struct("LBBinRewardFields", {        growth_inside_last: bcs.u128(),amount_owed: bcs.u64(),      })    }))()),      })    }))()),      })    }))()),      })    }))(),balance_x: ((arg0: BcsType<any>) => bcs.struct("Balance", {      fields: bcs.struct("BalanceFields", {        value: bcs.u64(),      })    }))(arg0),balance_y: ((arg0: BcsType<any>) => bcs.struct("Balance", {      fields: bcs.struct("BalanceFields", {        value: bcs.u64(),      })    }))(arg1),global_fee_info: (() => bcs.struct("GlobalFeeInfo", {      fields: bcs.struct("GlobalFeeInfoFields", {        total_fee_x: bcs.u64(),total_fee_y: bcs.u64(),swap_fee_x: bcs.u64(),swap_fee_y: bcs.u64(),flashloan_fee_x: bcs.u64(),flashloan_fee_y: bcs.u64(),composition_fee_x: bcs.u64(),composition_fee_y: bcs.u64(),      })    }))(),rewarder_manager: (() => bcs.struct("RewarderManager", {      fields: bcs.struct("RewarderManagerFields", {        rewarders: bcs.vector((() => bcs.struct("Rewarder", {      fields: bcs.struct("RewarderFields", {        reward_coin: (() => bcs.struct("TypeName", {      fields: bcs.struct("TypeNameFields", {        name: (() => bcs.struct("String", {      fields: bcs.struct("StringFields", {        bytes: bcs.vector(bcs.u8()),      })    }))(),      })    }))(),emissions_per_second: bcs.u128(),growth_global: bcs.u128(),      })    }))()),last_update_time: bcs.u64(),pending_rewards: bcs.vector(bcs.u128()),      })    }))(),        })      });      export function isLBPair(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_pair'          && tag.name === 'LBPair'      };export const LockPositionEvent = () => bcs.struct("LockPositionEvent", {        fields: bcs.struct("LockPositionEventFields", {          pair: bcs.Address,position: bcs.Address,lock_until: bcs.u64(),owner: bcs.Address,        })      });      export function isLockPositionEvent(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_pair'          && tag.name === 'LockPositionEvent'      };export const MintArraysStruct = () => bcs.struct("MintArrays", {        fields: bcs.struct("MintArraysFields", {          ids: bcs.vector(bcs.u32()),amounts: bcs.vector((() => bcs.struct("Amounts", {      fields: bcs.struct("AmountsFields", {        amount_x: bcs.u64(),amount_y: bcs.u64(),      })    }))()),liquidity_minted: bcs.vector(bcs.u128()),        })      });      export function isMintArrays(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_pair'          && tag.name === 'MintArrays'      };export const OpenPositionEvent = () => bcs.struct("OpenPositionEvent", {        fields: bcs.struct("OpenPositionEventFields", {          pair: bcs.Address,position: bcs.Address,owner: bcs.Address,        })      });      export function isOpenPositionEvent(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_pair'          && tag.name === 'OpenPositionEvent'      };export const OracleLengthIncreasedStruct = () => bcs.struct("OracleLengthIncreased", {        fields: bcs.struct("OracleLengthIncreasedFields", {          sender: bcs.Address,new_length: bcs.u16(),        })      });      export function isOracleLengthIncreased(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_pair'          && tag.name === 'OracleLengthIncreased'      };export const OracleParametersQueriedStruct = () => bcs.struct("OracleParametersQueried", {        fields: bcs.struct("OracleParametersQueriedFields", {          sample_lifetime: bcs.u8(),size: bcs.u16(),active_size: bcs.u16(),last_updated: bcs.u64(),first_timestamp: bcs.u64(),        })      });      export function isOracleParametersQueried(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_pair'          && tag.name === 'OracleParametersQueried'      };export const OracleSampleQueriedStruct = () => bcs.struct("OracleSampleQueried", {        fields: bcs.struct("OracleSampleQueriedFields", {          time: bcs.u64(),cumulative_id: bcs.u64(),cumulative_volatility: bcs.u64(),cumulative_bin_crossed: bcs.u64(),        })      });      export function isOracleSampleQueried(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_pair'          && tag.name === 'OracleSampleQueried'      };export const PriceFromIdQueriedStruct = () => bcs.struct("PriceFromIdQueried", {        fields: bcs.struct("PriceFromIdQueriedFields", {          id: bcs.u32(),price: bcs.u128(),        })      });      export function isPriceFromIdQueried(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_pair'          && tag.name === 'PriceFromIdQueried'      };export const RemoveLiquidityEvent = () => bcs.struct("RemoveLiquidityEvent", {        fields: bcs.struct("RemoveLiquidityEventFields", {          pair: bcs.Address,position: bcs.Address,ids: bcs.vector(bcs.u32()),tokens: (() => bcs.struct("Amounts", {      fields: bcs.struct("AmountsFields", {        amount_x: bcs.u64(),amount_y: bcs.u64(),      })    }))(),token_bins: bcs.vector((() => bcs.struct("Amounts", {      fields: bcs.struct("AmountsFields", {        amount_x: bcs.u64(),amount_y: bcs.u64(),      })    }))()),liquidity_burned: bcs.vector(bcs.u128()),bin_reserves_before: bcs.vector((() => bcs.struct("BinReserves", {      fields: bcs.struct("BinReservesFields", {        reserve_x: bcs.u64(),reserve_y: bcs.u64(),fee_x: bcs.u64(),fee_y: bcs.u64(),price: bcs.u128(),fee_growth_x: bcs.u128(),fee_growth_y: bcs.u128(),rewards_growth: bcs.vector(bcs.u128()),liquidity: bcs.u128(),last_update_time: bcs.u64(),      })    }))()),bin_reserves_after: bcs.vector((() => bcs.struct("BinReserves", {      fields: bcs.struct("BinReservesFields", {        reserve_x: bcs.u64(),reserve_y: bcs.u64(),fee_x: bcs.u64(),fee_y: bcs.u64(),price: bcs.u128(),fee_growth_x: bcs.u128(),fee_growth_y: bcs.u128(),rewards_growth: bcs.vector(bcs.u128()),liquidity: bcs.u128(),last_update_time: bcs.u64(),      })    }))()),        })      });      export function isRemoveLiquidityEvent(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_pair'          && tag.name === 'RemoveLiquidityEvent'      };export const RewarderAddedStruct = () => bcs.struct("RewarderAdded", {        fields: bcs.struct("RewarderAddedFields", {          pool: bcs.Address,rewarder_type: (() => bcs.struct("TypeName", {      fields: bcs.struct("TypeNameFields", {        name: (() => bcs.struct("String", {      fields: bcs.struct("StringFields", {        bytes: bcs.vector(bcs.u8()),      })    }))(),      })    }))(),        })      });      export function isRewarderAdded(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_pair'          && tag.name === 'RewarderAdded'      };export const RewarderEmissionUpdatedStruct = () => bcs.struct("RewarderEmissionUpdated", {        fields: bcs.struct("RewarderEmissionUpdatedFields", {          pool: bcs.Address,rewarder_type: (() => bcs.struct("TypeName", {      fields: bcs.struct("TypeNameFields", {        name: (() => bcs.struct("String", {      fields: bcs.struct("StringFields", {        bytes: bcs.vector(bcs.u8()),      })    }))(),      })    }))(),emissions_per_second: bcs.u128(),        })      });      export function isRewarderEmissionUpdated(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_pair'          && tag.name === 'RewarderEmissionUpdated'      };export const RewardsCollectedStruct = () => bcs.struct("RewardsCollected", {        fields: bcs.struct("RewardsCollectedFields", {          pool: bcs.Address,bucket_id: bcs.Address,bin_ids: bcs.vector(bcs.u32()),reward_type: (() => bcs.struct("TypeName", {      fields: bcs.struct("TypeNameFields", {        name: (() => bcs.struct("String", {      fields: bcs.struct("StringFields", {        bytes: bcs.vector(bcs.u8()),      })    }))(),      })    }))(),amounts: bcs.vector(bcs.u64()),        })      });      export function isRewardsCollected(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_pair'          && tag.name === 'RewardsCollected'      };export const StaticFeeParametersQueriedStruct = () => bcs.struct("StaticFeeParametersQueried", {        fields: bcs.struct("StaticFeeParametersQueriedFields", {          base_factor: bcs.u16(),filter_period: bcs.u16(),decay_period: bcs.u16(),reduction_factor: bcs.u16(),variable_fee_control: bcs.u32(),protocol_share: bcs.u16(),max_volatility_accumulator: bcs.u32(),        })      });      export function isStaticFeeParametersQueried(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_pair'          && tag.name === 'StaticFeeParametersQueried'      };export const StaticFeeParametersSetStruct = () => bcs.struct("StaticFeeParametersSet", {        fields: bcs.struct("StaticFeeParametersSetFields", {          sender: bcs.Address,base_factor: bcs.u16(),filter_period: bcs.u16(),decay_period: bcs.u16(),reduction_factor: bcs.u16(),variable_fee_control: bcs.u32(),protocol_share: bcs.u16(),max_volatility_accumulator: bcs.u32(),        })      });      export function isStaticFeeParametersSet(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_pair'          && tag.name === 'StaticFeeParametersSet'      };export const SwapStruct = () => bcs.struct("Swap", {        fields: bcs.struct("SwapFields", {          sender: bcs.Address,pair: bcs.Address,id_before: bcs.u32(),id_after: bcs.u32(),swap_for_y: bcs.bool(),amounts_in: (() => bcs.struct("Amounts", {      fields: bcs.struct("AmountsFields", {        amount_x: bcs.u64(),amount_y: bcs.u64(),      })    }))(),amounts_out: (() => bcs.struct("Amounts", {      fields: bcs.struct("AmountsFields", {        amount_x: bcs.u64(),amount_y: bcs.u64(),      })    }))(),volatility_accumulator: bcs.u32(),total_fees: (() => bcs.struct("Amounts", {      fields: bcs.struct("AmountsFields", {        amount_x: bcs.u64(),amount_y: bcs.u64(),      })    }))(),protocol_fees: (() => bcs.struct("Amounts", {      fields: bcs.struct("AmountsFields", {        amount_x: bcs.u64(),amount_y: bcs.u64(),      })    }))(),current_bin_reserves: (() => bcs.struct("BinReserves", {      fields: bcs.struct("BinReservesFields", {        reserve_x: bcs.u64(),reserve_y: bcs.u64(),fee_x: bcs.u64(),fee_y: bcs.u64(),price: bcs.u128(),fee_growth_x: bcs.u128(),fee_growth_y: bcs.u128(),rewards_growth: bcs.vector(bcs.u128()),liquidity: bcs.u128(),last_update_time: bcs.u64(),      })    }))(),        })      });      export function isSwap(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_pair'          && tag.name === 'Swap'      };export const VariableFeeParametersQueriedStruct = () => bcs.struct("VariableFeeParametersQueried", {        fields: bcs.struct("VariableFeeParametersQueriedFields", {          volatility_accumulator: bcs.u32(),volatility_reference: bcs.u32(),id_reference: bcs.u32(),time_of_last_update: bcs.u64(),        })      });      export function isVariableFeeParametersQueried(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_pair'          && tag.name === 'VariableFeeParametersQueried'      };export const LBBinPositionStruct = () => bcs.struct("LBBinPosition", {        fields: bcs.struct("LBBinPositionFields", {          amount: bcs.u128(),fee_growth_inside_last_x: bcs.u128(),fee_growth_inside_last_y: bcs.u128(),fees_pending_x: bcs.u64(),fees_pending_y: bcs.u64(),rewards: bcs.vector((() => bcs.struct("LBBinReward", {      fields: bcs.struct("LBBinRewardFields", {        growth_inside_last: bcs.u128(),amount_owed: bcs.u64(),      })    }))()),        })      });      export function isLBBinPosition(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_position'          && tag.name === 'LBBinPosition'      };export const LBBinRewardStruct = () => bcs.struct("LBBinReward", {        fields: bcs.struct("LBBinRewardFields", {          growth_inside_last: bcs.u128(),amount_owed: bcs.u64(),        })      });      export function isLBBinReward(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_position'          && tag.name === 'LBBinReward'      };export const LBPositionStruct = () => bcs.struct("LBPosition", {        fields: bcs.struct("LBPositionFields", {          id: bcs.struct('0x2::object::ID', {        id: bcs.Address      }),pair_id: bcs.Address,coin_type_a: (() => bcs.struct("TypeName", {      fields: bcs.struct("TypeNameFields", {        name: (() => bcs.struct("String", {      fields: bcs.struct("StringFields", {        bytes: bcs.vector(bcs.u8()),      })    }))(),      })    }))(),coin_type_b: (() => bcs.struct("TypeName", {      fields: bcs.struct("TypeNameFields", {        name: (() => bcs.struct("String", {      fields: bcs.struct("StringFields", {        bytes: bcs.vector(bcs.u8()),      })    }))(),      })    }))(),lock_until: bcs.u64(),        })      });      export function isLBPosition(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_position'          && tag.name === 'LBPosition'      };export const LBPositionInfoStruct = () => bcs.struct("LBPositionInfo", {        fields: bcs.struct("LBPositionInfoFields", {          position_id: bcs.Address,bins: ((arg0: BcsType<any>,arg1: BcsType<any>) => bcs.struct("Table", {      fields: bcs.struct("TableFields", {        id: bcs.struct('0x2::object::ID', {        id: bcs.Address      }),size: bcs.u64(),      })    }))(bcs.u32(),(() => bcs.struct("LBBinPosition", {      fields: bcs.struct("LBBinPositionFields", {        amount: bcs.u128(),fee_growth_inside_last_x: bcs.u128(),fee_growth_inside_last_y: bcs.u128(),fees_pending_x: bcs.u64(),fees_pending_y: bcs.u64(),rewards: bcs.vector((() => bcs.struct("LBBinReward", {      fields: bcs.struct("LBBinRewardFields", {        growth_inside_last: bcs.u128(),amount_owed: bcs.u64(),      })    }))()),      })    }))()),        })      });      export function isLBPositionInfo(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_position'          && tag.name === 'LBPositionInfo'      };export const LBPositionManagerStruct = () => bcs.struct("LBPositionManager", {        fields: bcs.struct("LBPositionManagerFields", {          total_supplies: ((arg0: BcsType<any>,arg1: BcsType<any>) => bcs.struct("Table", {      fields: bcs.struct("TableFields", {        id: bcs.struct('0x2::object::ID', {        id: bcs.Address      }),size: bcs.u64(),      })    }))(bcs.u32(),bcs.u128()),positions: ((arg0: BcsType<any>,arg1: BcsType<any>) => bcs.struct("Table", {      fields: bcs.struct("TableFields", {        id: bcs.struct('0x2::object::ID', {        id: bcs.Address      }),size: bcs.u64(),      })    }))(bcs.Address,(() => bcs.struct("LBPositionInfo", {      fields: bcs.struct("LBPositionInfoFields", {        position_id: bcs.Address,bins: ((arg0: BcsType<any>,arg1: BcsType<any>) => bcs.struct("Table", {      fields: bcs.struct("TableFields", {        id: bcs.struct('0x2::object::ID', {        id: bcs.Address      }),size: bcs.u64(),      })    }))(bcs.u32(),(() => bcs.struct("LBBinPosition", {      fields: bcs.struct("LBBinPositionFields", {        amount: bcs.u128(),fee_growth_inside_last_x: bcs.u128(),fee_growth_inside_last_y: bcs.u128(),fees_pending_x: bcs.u64(),fees_pending_y: bcs.u64(),rewards: bcs.vector((() => bcs.struct("LBBinReward", {      fields: bcs.struct("LBBinRewardFields", {        growth_inside_last: bcs.u128(),amount_owed: bcs.u64(),      })    }))()),      })    }))()),      })    }))()),        })      });      export function isLBPositionManager(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_position'          && tag.name === 'LBPositionManager'      };export const LB_POSITIONStruct = () => bcs.struct("LB_POSITION", {        fields: bcs.struct("LB_POSITIONFields", {          dummy_field: bcs.bool(),        })      });      export function isLB_POSITION(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'lb_position'          && tag.name === 'LB_POSITION'      };export const LiquidityConfigStruct = () => bcs.struct("LiquidityConfig", {        fields: bcs.struct("LiquidityConfigFields", {          distribution_x: bcs.u64(),distribution_y: bcs.u64(),id: bcs.u32(),        })      });      export function isLiquidityConfig(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'liquidity_configurations'          && tag.name === 'LiquidityConfig'      };export const OracleStruct = () => bcs.struct("Oracle", {        fields: bcs.struct("OracleFields", {          samples: bcs.vector((() => bcs.struct("Sample", {      fields: bcs.struct("SampleFields", {        oracle_length: bcs.u16(),cumulative_id: bcs.u64(),cumulative_volatility: bcs.u64(),cumulative_bin_crossed: bcs.u64(),sample_lifetime: bcs.u8(),created_at: bcs.u64(),      })    }))()),initialized: bcs.bool(),        })      });      export function isOracle(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'oracle_helper'          && tag.name === 'Oracle'      };export const SampleStruct = () => bcs.struct("Sample", {        fields: bcs.struct("SampleFields", {          oracle_length: bcs.u16(),cumulative_id: bcs.u64(),cumulative_volatility: bcs.u64(),cumulative_bin_crossed: bcs.u64(),sample_lifetime: bcs.u8(),created_at: bcs.u64(),        })      });      export function isSample(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'oracle_helper'          && tag.name === 'Sample'      };export const PairParametersStruct = () => bcs.struct("PairParameters", {        fields: bcs.struct("PairParametersFields", {          base_factor: bcs.u16(),filter_period: bcs.u16(),decay_period: bcs.u16(),reduction_factor: bcs.u16(),variable_fee_control: bcs.u32(),protocol_share: bcs.u16(),max_volatility_accumulator: bcs.u32(),volatility_accumulator: bcs.u32(),volatility_reference: bcs.u32(),id_reference: bcs.u32(),time_of_last_update: bcs.u64(),oracle_id: bcs.u16(),active_id: bcs.u32(),        })      });      export function isPairParameters(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'pair_parameter_helper'          && tag.name === 'PairParameters'      };export const DepositEvent = () => bcs.struct("DepositEvent", {        fields: bcs.struct("DepositEventFields", {          vault: bcs.Address,reward_type: (() => bcs.struct("TypeName", {      fields: bcs.struct("TypeNameFields", {        name: (() => bcs.struct("String", {      fields: bcs.struct("StringFields", {        bytes: bcs.vector(bcs.u8()),      })    }))(),      })    }))(),amount: bcs.u64(),total_balance: bcs.u64(),        })      });      export function isDepositEvent(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'rewarder'          && tag.name === 'DepositEvent'      };export const EmissionUpdateEvent = () => bcs.struct("EmissionUpdateEvent", {        fields: bcs.struct("EmissionUpdateEventFields", {          pool: bcs.Address,reward_type: (() => bcs.struct("TypeName", {      fields: bcs.struct("TypeNameFields", {        name: (() => bcs.struct("String", {      fields: bcs.struct("StringFields", {        bytes: bcs.vector(bcs.u8()),      })    }))(),      })    }))(),old_rate: bcs.u128(),new_rate: bcs.u128(),        })      });      export function isEmissionUpdateEvent(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'rewarder'          && tag.name === 'EmissionUpdateEvent'      };export const FeeAmountsStruct = () => bcs.struct("FeeAmounts", {        fields: bcs.struct("FeeAmountsFields", {          fee_x: bcs.u64(),fee_y: bcs.u64(),        })      });      export function isFeeAmounts(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'rewarder'          && tag.name === 'FeeAmounts'      };export const FeeTrackingStruct = () => bcs.struct("FeeTracking", {        fields: bcs.struct("FeeTrackingFields", {          bin_fees: ((arg0: BcsType<any>,arg1: BcsType<any>) => bcs.struct("Table", {      fields: bcs.struct("TableFields", {        id: bcs.struct('0x2::object::ID', {        id: bcs.Address      }),size: bcs.u64(),      })    }))(bcs.u32(),(() => bcs.struct("FeeAmounts", {      fields: bcs.struct("FeeAmountsFields", {        fee_x: bcs.u64(),fee_y: bcs.u64(),      })    }))()),total_fees: (() => bcs.struct("FeeAmounts", {      fields: bcs.struct("FeeAmountsFields", {        fee_x: bcs.u64(),fee_y: bcs.u64(),      })    }))(),bin_ids: bcs.vector(bcs.u32()),        })      });      export function isFeeTracking(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'rewarder'          && tag.name === 'FeeTracking'      };export const RewardDistributionStruct = () => bcs.struct("RewardDistribution", {        fields: bcs.struct("RewardDistributionFields", {          bin_id: bcs.u32(),reward_amount: bcs.u128(),rewarder_index: bcs.u64(),        })      });      export function isRewardDistribution(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'rewarder'          && tag.name === 'RewardDistribution'      };export const RewardDistributionEvent = () => bcs.struct("RewardDistributionEvent", {        fields: bcs.struct("RewardDistributionEventFields", {          pool: bcs.Address,bins_count: bcs.u64(),total_rewards_distributed: bcs.vector(bcs.u64()),        })      });      export function isRewardDistributionEvent(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'rewarder'          && tag.name === 'RewardDistributionEvent'      };export const RewarderStruct = () => bcs.struct("Rewarder", {        fields: bcs.struct("RewarderFields", {          reward_coin: (() => bcs.struct("TypeName", {      fields: bcs.struct("TypeNameFields", {        name: (() => bcs.struct("String", {      fields: bcs.struct("StringFields", {        bytes: bcs.vector(bcs.u8()),      })    }))(),      })    }))(),emissions_per_second: bcs.u128(),growth_global: bcs.u128(),        })      });      export function isRewarder(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'rewarder'          && tag.name === 'Rewarder'      };export const RewarderAdminCapStruct = () => bcs.struct("RewarderAdminCap", {        fields: bcs.struct("RewarderAdminCapFields", {          id: bcs.struct('0x2::object::ID', {        id: bcs.Address      }),        })      });      export function isRewarderAdminCap(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'rewarder'          && tag.name === 'RewarderAdminCap'      };export const RewarderGlobalVaultStruct = () => bcs.struct("RewarderGlobalVault", {        fields: bcs.struct("RewarderGlobalVaultFields", {          id: bcs.struct('0x2::object::ID', {        id: bcs.Address      }),balances: (() => bcs.struct("Bag", {      fields: bcs.struct("BagFields", {        id: bcs.struct('0x2::object::ID', {        id: bcs.Address      }),size: bcs.u64(),      })    }))(),        })      });      export function isRewarderGlobalVault(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'rewarder'          && tag.name === 'RewarderGlobalVault'      };export const RewarderInitEvent = () => bcs.struct("RewarderInitEvent", {        fields: bcs.struct("RewarderInitEventFields", {          global_vault_id: bcs.Address,admin_cap_id: bcs.Address,        })      });      export function isRewarderInitEvent(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'rewarder'          && tag.name === 'RewarderInitEvent'      };export const RewarderManagerStruct = () => bcs.struct("RewarderManager", {        fields: bcs.struct("RewarderManagerFields", {          rewarders: bcs.vector((() => bcs.struct("Rewarder", {      fields: bcs.struct("RewarderFields", {        reward_coin: (() => bcs.struct("TypeName", {      fields: bcs.struct("TypeNameFields", {        name: (() => bcs.struct("String", {      fields: bcs.struct("StringFields", {        bytes: bcs.vector(bcs.u8()),      })    }))(),      })    }))(),emissions_per_second: bcs.u128(),growth_global: bcs.u128(),      })    }))()),last_update_time: bcs.u64(),pending_rewards: bcs.vector(bcs.u128()),        })      });      export function isRewarderManager(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'rewarder'          && tag.name === 'RewarderManager'      };export const WithdrawEvent = () => bcs.struct("WithdrawEvent", {        fields: bcs.struct("WithdrawEventFields", {          vault: bcs.Address,reward_type: (() => bcs.struct("TypeName", {      fields: bcs.struct("TypeNameFields", {        name: (() => bcs.struct("String", {      fields: bcs.struct("StringFields", {        bytes: bcs.vector(bcs.u8()),      })    }))(),      })    }))(),amount: bcs.u64(),remaining_balance: bcs.u64(),        })      });      export function isWithdrawEvent(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'rewarder'          && tag.name === 'WithdrawEvent'      };export const TreeUint24Struct = () => bcs.struct("TreeUint24", {        fields: bcs.struct("TreeUint24Fields", {          level0: bcs.u256(),level1: ((arg0: BcsType<any>,arg1: BcsType<any>) => bcs.struct("Table", {      fields: bcs.struct("TableFields", {        id: bcs.struct('0x2::object::ID', {        id: bcs.Address      }),size: bcs.u64(),      })    }))(bcs.u64(),bcs.u256()),level2: ((arg0: BcsType<any>,arg1: BcsType<any>) => bcs.struct("Table", {      fields: bcs.struct("TableFields", {        id: bcs.struct('0x2::object::ID', {        id: bcs.Address      }),size: bcs.u64(),      })    }))(bcs.u64(),bcs.u256()),        })      });      export function isTreeUint24(tag: StructTag) {        return tag.address === '0x4a11ac0a882cf35df85a07c6f10517e8bb553fb90d00e33034fcd4b4707c74d2' && tag.module === 'tree_math'          && tag.name === 'TreeUint24'      };